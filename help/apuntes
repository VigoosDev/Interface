const express = require('express');
const router = express.Router();

// GET all passwords
router.get('/', (req, res) => {
  connection.query('SELECT * FROM passwords', (err, results) => {
    if (err) throw err;
    res.send(results);
  });
});

// GET a password by ID
router.get('/:id', (req, res) => {
  const id = req.params.id;
  connection.query('SELECT * FROM passwords WHERE id = ?', [id], (err, results) => {
    if (err) throw err;
    res.send(results[0]);
  });
});

// CREATE a new password
router.post('/', (req, res) => {
  const { username, password } = req.body;
  connection.query('INSERT INTO passwords (username, password) VALUES (?, ?)', [username, password], (err, results) => {
    if (err) throw err;
    res.send(results.insertId.toString());
  });
});

// UPDATE a password by ID
router.put('/:id', (req, res) => {
  const id = req.params.id;
  const { username, password } = req.body;
  connection.query('UPDATE passwords SET username = ?, password = ? WHERE id = ?', [username, password, id], (err, results) => {
    if (err) throw err;
    res.send('Password updated successfully.');
  });
});

// DELETE a password by ID
router.delete('/:id', (req, res) => {
  const id = req.params.id;
  connection.query('DELETE FROM passwords WHERE id = ?', [id], (err, results) => {
    if (err) throw err;
    res.send('Password deleted successfully.');
  });
});

module.exports = router;





//const express = require('express');
const mysql = require('mysql');

const app = express();

// Configuración de la conexión a la base de datos
const connection = mysql.createConnection({
	host: '127.0.0.1',
	user: 'root',
	password: '60137112',
	database: 'password'
});

// Middleware para procesar el cuerpo de las solicitudes
app.use(express.urlencoded({ extended: true }));

// Manejador de la ruta para guardar una contraseña en la base de datos
app.post('/password', (req, res) => {
	const password = req.body.password;

	// Insertar la contraseña en la base de datos
	connection.query('INSERT INTO passwords (password) VALUES (?)', [password], (error, results) => {
		if (error) throw error;
		res.redirect('/');
	});
});

// Manejador de la ruta para obtener todas las contraseñas de la base de datos
app.get('/passwords', (req, res) => {
	connection.query('SELECT * FROM passwords', (error, results) => {
		if (error) throw error;
		res.json(results);
	});
});

// Servidor web
app.listen(3000, () => {
	console.log('Servidor web iniciado en http://localhost:3000');
});





<!–<label for="name">Nombre de usuario:</label> ––> 
            <input type="text" name="name" id="name" required >
            
            <label for="email">Correo electrónico:</label>
            <input type="email" name="email" id="email" required>

codigo antiguo y funcional:


const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const connection = require('./Models/config/db');
const { obtenerRegistroPorId } = require('./public/registros');
const methodOverride = require('method-override');

const app = express();
app.set('view engine', 'ejs');

app.use(methodOverride('_method'));

// Parsea el cuerpo de la solicitud HTTP
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// Ruta para crear un nuevo usuario
app.post('/users', (req, res) => {
  const { name, email } = req.body;

  connection.query('INSERT INTO registro SET ?', { name, email }, (err, result) => {
    if (err) {
      console.log('Error al crear un nuevo usuario:', err);
      res.status(500).json({ message: 'Error al crear un nuevo usuario' });
      return;
    }
    console.log('Nuevo usuario creado:', { name, email });
    res.json({ message: 'Nuevo usuario creado con éxito', id: result.insertId });
  });
});

// Ruta para mostrar la lista de usuarios registrados
app.use(express.static(path.join(__dirname, 'public')));

app.get('/registros', (req, res) => {
  connection.query('SELECT * FROM registro', (err, results) => {
    if (err) {
      console.log('Error al obtener la lista de usuarios:', err);
      res.status(500).json({ message: 'Error al obtener la lista de usuarios' });
      return;
    }
    res.render('registrados', { users: results });
  });
});

// Ruta para eliminar un usuario
app.delete('/users/:id', (req, res) => {
  const { id } = req.params;
  connection.query('DELETE FROM registro WHERE id = ?', [id], (err, result) => {
    if (err) {
      console.log('Error al eliminar el usuario:', err);
      res.status(500).json({ message: 'Error al eliminar el usuario' });
      return;
    }
    console.log('Usuario eliminado:', { id });
    res.redirect('/registros');
  });
});
// Ruta para actualizar un usuario
app.put('/users/:id', (req, res) => {
  const { id } = req.params;
  const { name, email } = req.body;

  connection.query('UPDATE registro SET name = ?, email = ? WHERE id = ?', [name, email, id], (err, result) => {
    if (err) {
      console.log('Error al actualizar el usuario:', err);
      res.status(500).json({ message: 'Error al actualizar el usuario' });
      return;
    }
    console.log('Usuario actualizado:', { id, name, email });
    res.redirect('/registros');
  });
});
// Ruta para mostrar formulario de actualización
app.get("/edit/:id", async (req, res) => {
  const { id } = req.params;
  const registro = await obtenerRegistroPorId(id);
  res.render("editar", { registro });
});

// Ruta para actualizar un usuario
//app.put('/edit/:id', (req, res) => {
  //const id = req.params.id;
  //const name = req.body.name;
  //const email = req.body.email;

  //connection.query('UPDATE registro SET name = ?, email = ? WHERE id = ?', [name, email, id], (err, results) => {
    //if (err) {
      //console.error(err);
      //res.status(500).send('Error al actualizar el usuario');
    //} else {
      //console.log('Usuario actualizado:', { id, name, email });
      //res.redirect('/registros');
    //}
  //});
//});

// Inicia el servidor web
app.listen(3000, () => {
  console.log('Servidor web Express iniciado en http://localhost:3000');
});



<html lang="en">

<head>
  <meta charset="UTF-8">
  <link rel="stylesheet" href="/interfaz/soporte.css">
  <link rel="stylesheet" href="/interfaz/error.css">
  <link href="https://fonts.googleapis.com/css2?family=FAMILY_NAME:wght@WEIGHT_OR_RANGE&display=swap" rel="stylesheet">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Correos</title>
</head>

<body>
  
  <!-- soporte.ejs -->
  <div class="hero">
    <%- include('../partials/error') %>
    <nav class="navbar">
      <h2 class="logo">Sistema <span>fugas</span></h2>
      <ul>
        <li><a href="#"></a></li>
      </ul>
      <form action="/dashboard" method="get">
        <button class="perfil" type="submit">regresar</button>
      </form>
    </nav>
    <main class="main">
      <!-- Encabezado de la página -->
      <h1>Correos</h1>

      <!-- Descripción o instrucciones para los usuarios -->
      <p class="color-p">Si necesita ayuda o tiene alguna pregunta, puede comunicarse con nuestro equipo de soporte.</p>

      <!-- Formulario de contacto -->
      <form action="/correoElec" method="POST">
        <label for="nombre">Nombre:</label>
        <input type="text" id="nombre" name="nombre" required>

        <label for="correo">Correo electrónico:</label>
        <input type="email" id="correo" name="correo" required>

        <label for="mensaje">Mensaje:</label>
        <textarea id="mensaje" name="mensaje" required></textarea>

        <!-- Campo oculto para almacenar los IDs de los electricistas registrados -->
        <input type="hidden" id="electricistas" name="electricistas" value="<%= Array.isArray(electricistas) ? electricistas.join(',') : '' %>">

        <button type="submit">Enviar mensaje</button>
      </form>
    </main>

  </div>

</body>

</html>